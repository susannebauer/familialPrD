Gran <- CB_gs$`1969_[PubMed:19013282]_Mouse_cerebellum_granule_cell_markers`
cb <- intersect(PC, Gran)
Gran <- filter(Gran != cb)
Gran <- Gran[!Gran %in% cb]
PC <- PC[!PC %in% cb]
intersect(Gran, deg)
intersect(PC, deg)
PC <- CB_gs$`1968_[PubMed:19013282]_Mouse_cerebellum_Purkinje_cell_markers`
intersect(PC, deg)
cb <- intersect(PC, Gran)
Gran <- Gran[!Gran %in% cb]
PC <- PC[!PC %in% cb]
intersect(PC, deg)
Gran <- Gran[!Gran %in% cb]
intersect(Gran, deg)
sca <- intersect(SCA1_4, deg)
intersect(m2, sca)
intersect(sca, deg)
sca <- intersect(SCA1_11, deg)
intersect(sca, deg)
View(resHD)
View(resHD)
resHD <- data.frame(res_HD$resTab[order(res_HD$p.adj, decreasing = F),])
resHD <- filter(resTable, Adjusted.p.value < 0.01)
View(resHD)
ggplot(resHD[1:15], aes(x = -log10(Adjusted.p.value), y = rownames()))+
geom_bar()
ggplot(resHD[1:15,], aes(x = -log10(Adjusted.p.value), y = rownames()))+
geom_bar()
ggplot(resHD[1:15,], aes(x = reorder(-log10(Adjusted.p.value)), y = rownames()))+
geom_bar()
plot <- resHD %>%
mutate(log_p == -log10(Adjusted.p.value))%>%
reorder(log_p)
plot <- resHD %>%
mutate(log_p == -log10(Adjusted.p.value))
plot <- resHD %>%
mutate("log_p" == -log10(Adjusted.p.value))
plot <- resHD %>%
mutate("log_p" = -log10(Adjusted.p.value))
plot <- resHD %>%
mutate("log_p" = -log10(Adjusted.p.value))%>%
reorder(log_p)
plot <- resHD %>%
mutate("log_p" = -log10(Adjusted.p.value))%>%
reorder("log_p")
plot <- resHD %>%
mutate("log_p" = -log10(Adjusted.p.value))%>%
order(log_p, decreasing = F)
plot <- resHD %>%
mutate("log_p" = -log10(Adjusted.p.value))%>%
order("log_p", decreasing = F)
plot <- resHD %>%
mutate("log_p" = -log10(Adjusted.p.value))%>%
order(log_p, decreasing = F)
plot <- resHD %>%
mutate("log_p" = -log10(Adjusted.p.value))
View(plot)
plot <- resHD %>%
mutate("log_p" = -log10(Adjusted.p.value))%>%
arrange(log_p)
plot <- resHD %>%
mutate("log_p" = -log10(Adjusted.p.value))%>%
arrange(desc(log_p))
plot <- resHD %>%
mutate("log_p" = -log10(Adjusted.p.value))%>%
arrange(desc(log_p))%>%
slice_max(log_p, n = 15)
View(plot)
plot <- resHD %>%
filter(rownames(.) %in% "R6/2")%>%
mutate("log_p" = -log10(Adjusted.p.value))%>%
arrange(desc(log_p))%>%
slice_max(log_p, n = 15)
plot <- resHD %>%
mutate("Term" = rownames(.))
plot <- resHD %>%
mutate("Term" = rownames(.))%>%
filter(Term %in% "R6/2")%>%
mutate("log_p" = -log10(Adjusted.p.value))%>%
arrange(desc(log_p))%>%
slice_max(log_p, n = 15)
plot <- resHD %>%
mutate("Term" = rownames(.))%>%
filter(contains("R6/2", Term))%>%
mutate("log_p" = -log10(Adjusted.p.value))%>%
arrange(desc(log_p))%>%
slice_max(log_p, n = 15)
plot <- resHD %>%
mutate("Term" = rownames(.))%>%
filter(contains("R6/2"))%>%
mutate("log_p" = -log10(Adjusted.p.value))%>%
arrange(desc(log_p))%>%
slice_max(log_p, n = 15)
plot <- resHD %>%
mutate("Term" = rownames(.))%>%
filter(Term, contains("R6/2"))%>%
mutate("log_p" = -log10(Adjusted.p.value))%>%
arrange(desc(log_p))%>%
slice_max(log_p, n = 15)
plot <- resHD %>%
mutate("Term" = rownames(.))%>%
filter(Term, matches("R6/2"))%>%
mutate("log_p" = -log10(Adjusted.p.value))%>%
arrange(desc(log_p))%>%
slice_max(log_p, n = 15)
plot <- resHD %>%
mutate("Term" = rownames(.))%>%
filter(Term, contains("R6/2"))%>%
mutate("log_p" = -log10(Adjusted.p.value))%>%
arrange(desc(log_p))%>%
slice_max(log_p, n = 15)
plot <- resHD %>%
mutate("Term" = rownames(.))%>%
filter(Term != ".*R6/2*")
View(plot)
plot <- resHD %>%
mutate("Term" = rownames(.))%>%
filter(Term != ".*R6/2.*")
plot <- resHD %>%
mutate("Term" = rownames(.))%>%
filter(Term != ".*R6/2*.")
plot <- resHD %>%
mutate("Term" = rownames(.))%>%
mutate("log_p" = -log10(Adjusted.p.value))%>%
arrange(desc(log_p))%>%
slice_max(log_p, n = 15)
ggplot(plot, aes(x = log_p, y = Term))+
geom_bar()
ggplot(plot, aes(x = log_p, y = Term))+
geom_col()
ggplot(plot, aes(x = reorder(log_p), y = Term))+
geom_col()
ggplot(plot, aes(x = log_p, y = reorder(Term, log_p)))+
geom_col()
celltype <- "VglutCb"
deg <- HD_DEGs%>%
filter(Celltype == celltype)
up_deg <- deg %>%
filter(padj <= 0.05)%>%
filter(sLFC > 0) %>%
arrange(padj)%>%
pull(symbol)
down_deg <- deg %>%
filter(padj <= 0.05)%>%
filter(sLFC < 0) %>%
arrange(padj)%>%
pull(symbol)
ORA_enrichr <- function(genes){
require(enrichR)
dbs <- c('HDSigDB_Mouse_2021')
ora <- enrichr(genes, dbs)
for (i in 1:length(ora)) {
ora[[i]] <- ora[[i]] %>% filter(Adjusted.P.value <= 0.01)
i <- i+1
}
ora <- do.call(rbind, ora)
return(ora)
}
HD_up <- ORA_enrichr(up_deg)
HD_up$Direction <- "up"
HD_down <- ORA_enrichr(down_deg)
HD_down$Direction <- "down"
ora_HD <- rbind(HD_up, HD_down)
#HDinHD genesets
#Cerebellum, allelic series: "GSE73468|GSE78270"
#Striatum, allelic series "GSE78274|GSE123657"
#Select datasets from allelic series, mRNAseq
comp_allelic_series <- ora_HD %>%
#filter(str_detect(Term, pattern = "GSE73468|GSE78270", negate = F))%>%
mutate(set_size = as.numeric(str_extract(Overlap, pattern = "[:digit:]+$")))%>%
mutate(Gene_count = as.numeric(str_extract(Overlap, "^[^/]+"))) %>%
mutate(ratio = as.numeric(str_extract(Overlap, "^[^/]+"))/as.numeric(str_extract(Overlap, "[^/]+$")))%>%
filter(set_size > 15)%>%
arrange(Adjusted.P.value)%>%
group_by(Direction)
#Enrichment dotplot HD gene sets
ggplot(comp_allelic_series, aes(y = reorder(Term, -log10(Adjusted.P.value)),
x = -log10(Adjusted.P.value),
size = Gene_count,
color = Direction))+
geom_segment(aes(y = reorder(Term, -log10(Adjusted.P.value)),
yend = reorder(Term, -log10(Adjusted.P.value)),
x = 0,
xend = -log10(Adjusted.P.value)),
position = position_dodge(width = 0.9),
size = .3, color = "grey72")+
geom_point(position = position_dodge(width = 0.9))+
theme_bw()+
theme(panel.grid = element_blank(),
axis.text = element_text(size = 10),
axis.title.y = element_text(size = 12),
plot.title.position = "plot")+
labs(title = paste("Enrichment of", celltype, "DEGs for HDSigDB Mouse genesets (HDinHD)"),
y = "",
x = "-log10(Adjusted p-value)",
color = "Direction",
size = "Gene count")+
facet_grid(~Direction)
ggsave(file = paste0(dir, "figures/DESeq2/Plot_", celltype,"_compHDinHD.png"), dpi = 300, units = "cm", height = 12, width = 32)
#Enrichment dotplot HD gene sets
ggplot(comp_allelic_series, aes(y = reorder(Term, -log10(Adjusted.P.value)),
x = -log10(Adjusted.P.value),
size = Gene_count,
color = Direction))+
geom_segment(aes(y = reorder(Term, -log10(Adjusted.P.value)),
yend = reorder(Term, -log10(Adjusted.P.value)),
x = 0,
xend = -log10(Adjusted.P.value)),
position = position_dodge(width = 0.9),
size = .3, color = "grey72")+
geom_point(position = position_dodge(width = 0.9))+
theme_bw()+
theme(panel.grid = element_blank(),
axis.text = element_text(size = 10),
axis.title.y = element_text(size = 12),
plot.title.position = "plot")+
labs(title = paste("Enrichment of", celltype, "DEGs for HDSigDB Mouse genesets (HDinHD)"),
y = "",
x = "-log10(Adjusted p-value)",
color = "Direction",
size = "Gene count")+
facet_grid(~Direction)
#Select datasets from allelic series, mRNAseq
comp_allelic_series <- ora_HD %>%
#filter(str_detect(Term, pattern = "GSE73468|GSE78270", negate = F))%>%
mutate(set_size = as.numeric(str_extract(Overlap, pattern = "[:digit:]+$")))%>%
mutate(Gene_count = as.numeric(str_extract(Overlap, "^[^/]+"))) %>%
mutate(ratio = as.numeric(str_extract(Overlap, "^[^/]+"))/as.numeric(str_extract(Overlap, "[^/]+$")))%>%
filter(set_size > 15)%>%
arrange(Adjusted.P.value)%>%
group_by(Direction)
celltype <- "VglutCb"
deg <- HD_DEGs%>%
filter(Celltype == celltype)
deg <- HD_DEGS%>%
filter(Celltype == celltype)
up_deg <- deg %>%
filter(padj <= 0.05)%>%
filter(sLFC > 0) %>%
arrange(padj)%>%
pull(symbol)
down_deg <- deg %>%
filter(padj <= 0.05)%>%
filter(sLFC < 0) %>%
arrange(padj)%>%
pull(symbol)
ORA_enrichr <- function(genes){
require(enrichR)
dbs <- c('HDSigDB_Mouse_2021')
ora <- enrichr(genes, dbs)
for (i in 1:length(ora)) {
ora[[i]] <- ora[[i]] %>% filter(Adjusted.P.value <= 0.01)
i <- i+1
}
ora <- do.call(rbind, ora)
return(ora)
}
HD_up <- ORA_enrichr(up_deg)
HD_up$Direction <- "up"
HD_down <- ORA_enrichr(down_deg)
HD_down$Direction <- "down"
ora_HD <- rbind(HD_up, HD_down)
#Select datasets from allelic series, mRNAseq
comp_allelic_series <- ora_HD %>%
#filter(str_detect(Term, pattern = "GSE73468|GSE78270", negate = F))%>%
mutate(set_size = as.numeric(str_extract(Overlap, pattern = "[:digit:]+$")))%>%
mutate(Gene_count = as.numeric(str_extract(Overlap, "^[^/]+"))) %>%
mutate(ratio = as.numeric(str_extract(Overlap, "^[^/]+"))/as.numeric(str_extract(Overlap, "[^/]+$")))%>%
filter(set_size > 15)%>%
arrange(Adjusted.P.value)%>%
group_by(Direction)
#Enrichment dotplot HD gene sets
ggplot(comp_allelic_series, aes(y = reorder(Term, -log10(Adjusted.P.value)),
x = -log10(Adjusted.P.value),
size = Gene_count,
color = Direction))+
geom_segment(aes(y = reorder(Term, -log10(Adjusted.P.value)),
yend = reorder(Term, -log10(Adjusted.P.value)),
x = 0,
xend = -log10(Adjusted.P.value)),
position = position_dodge(width = 0.9),
size = .3, color = "grey72")+
geom_point(position = position_dodge(width = 0.9))+
theme_bw()+
theme(panel.grid = element_blank(),
axis.text = element_text(size = 10),
axis.title.y = element_text(size = 12),
plot.title.position = "plot")+
labs(title = paste("Enrichment of", celltype, "DEGs for HDSigDB Mouse genesets (HDinHD)"),
y = "",
x = "-log10(Adjusted p-value)",
color = "Direction",
size = "Gene count")+
facet_grid(~Direction)
#Select datasets from allelic series, mRNAseq
comp_allelic_series <- ora_HD %>%
#filter(str_detect(Term, pattern = "GSE73468|GSE78270", negate = F))%>%
mutate(set_size = as.numeric(str_extract(Overlap, pattern = "[:digit:]+$")))%>%
mutate(Gene_count = as.numeric(str_extract(Overlap, "^[^/]+"))) %>%
mutate(ratio = as.numeric(str_extract(Overlap, "^[^/]+"))/as.numeric(str_extract(Overlap, "[^/]+$")))%>%
filter(set_size > 15)%>%
arrange(Adjusted.P.value)%>%
group_by(Direction) %>%
slice_max(Combined.Score, n = 15)
#Enrichment dotplot HD gene sets
ggplot(comp_allelic_series, aes(y = reorder(Term, -log10(Adjusted.P.value)),
x = -log10(Adjusted.P.value),
size = Gene_count,
color = Direction))+
geom_segment(aes(y = reorder(Term, -log10(Adjusted.P.value)),
yend = reorder(Term, -log10(Adjusted.P.value)),
x = 0,
xend = -log10(Adjusted.P.value)),
position = position_dodge(width = 0.9),
size = .3, color = "grey72")+
geom_point(position = position_dodge(width = 0.9))+
theme_bw()+
theme(panel.grid = element_blank(),
axis.text = element_text(size = 10),
axis.title.y = element_text(size = 12),
plot.title.position = "plot")+
labs(title = paste("Enrichment of", celltype, "DEGs for HDSigDB Mouse genesets (HDinHD)"),
y = "",
x = "-log10(Adjusted p-value)",
color = "Direction",
size = "Gene count")+
facet_grid(~Direction)
m2 <- intersect(Q175_2m, deg)
m6 <- intersect(Q175_6m, deg)
m10 <- intersect(Q175_10m, deg)
sca <- intersect(SCA1_11, deg)
######
deg <- DEGs$symbol
##Select relevant gene set and extract gene symbols
s <- "(?=.*cerebellum)"
gs <- names(HDSigDb$gsc)
cb <- grepl(gs, pattern = s, ignore.case = T, perl = T)
CB_gs <- HDSigDb$gsc[cb]
names(CB_gs)
SCA1_4 <- CB_gs$`288_[GEO:GSE2867]_Expression_in_cerebellum_of_4_wk_SCA1_spinocerebellar_ataxia_1_mice`
SCA1_11 <- CB_gs$`289_[GEO:GSE2867]_Expression_in_cerebellum_of_11_wk_SCA1_spinocerebellar_ataxia_1_mice`
PC <- CB_gs$`1968_[PubMed:19013282]_Mouse_cerebellum_Purkinje_cell_markers`
Gran <- CB_gs$`1969_[PubMed:19013282]_Mouse_cerebellum_granule_cell_markers`
Q175_2m <- CB_gs$`1529_[GEO:GSE73468]_Differentially_expressed_genes_in_cerebellum_of_2_mon_HD_Q175_mice_vs_Q20`
Q175_6m <- CB_gs$`1530_[GEO:GSE73468]_Differentially_expressed_genes_in_cerebellum_of_6_mon_HD_Q175_mice_vs_Q20`
Q175_10m <- CB_gs$`1531_[GEO:GSE73468]_Differentially_expressed_genes_in_cerebellum_of_10_mon_HD_Q175_mice_vs_Q20`
m2 <- intersect(Q175_2m, deg)
m6 <- intersect(Q175_6m, deg)
m10 <- intersect(Q175_10m, deg)
sca <- intersect(SCA1_11, deg)
intersect(sca, deg)
intersect(Gran, deg)
intersect(PC, deg)
cb <- intersect(PC, Gran)
Gran <- Gran[!Gran %in% cb]
PC <- PC[!PC %in% cb]
m2
knitr::opts_knit$set(root.dir = "~/Documents/DataAnalysis_Ribotag/Prion_project/")
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(ggplot2)
library(ggrepel)
library(ggforce)
library(dplyr)
library(plotly)
library(reshape2)
library(UpSetR)
library(kableExtra)
library(patchwork)
library(tximport)
dir <- params$directory
date <- Sys.Date()
group_color_scheme <- c(FFI = "#B74D67", CJD = "#1D599C", Control = "#FEAF92")
#set path to results folder with DESeq2 output
path_FFI <-  paste0(dir, "intermediate_files/FFI/")
path_CJD <- paste0(dir, "intermediate_files/CJD/")
compile_genestats <- function(path){
DEseq_list <- list.files(path, pattern = glob2rx("DESeq2*.csv"), full.names = T)
#extract TPM values and gene id from samples, sort by gene id and sum duplicates. Save TPM values with id in list
genestats <- list()
for (i in 1:length(DEseq_list)){
name <- regmatches(DEseq_list[i], regexec('DESeq2_(.*?)\\.csv', DEseq_list[i]))[[1]][2]
name <- strsplit(name, split = "_")
Disease <- name[[1]][1]
Celltype <- name [[1]][2]
stat <- read.delim(DEseq_list[i], header=T, stringsAsFactors = F, sep = ",")
stat$Celltype <- Celltype
stat$Disease <- Disease
genestats[[paste(Celltype)]] <- stat
i <- i+1
}
all_stats <- bind_rows(genestats, .id = "Celltype")
all_stats <- all_stats[complete.cases(all_stats),]
all_stats <- all_stats %>%
dplyr::select(Disease, Celltype, X, symbol, entrez, pvalue, padj, shrunkenLFC)%>%
dplyr::rename(Ensembl = X, sLFC = shrunkenLFC, Entrez = entrez)
return(all_stats)
}
CJD_genestats <- compile_genestats(path = path_CJD)
FFI_genestats <- compile_genestats(path = path_FFI)
all_genestats <- rbind(CJD_genestats, FFI_genestats)
#save compiled files
write.csv(CJD_genestats, file = paste0(dir, "/result_files/DEseq/CJD_DESeq_res_all",date,".csv"))
write.csv(FFI_genestats, file = paste0(dir, "/result_files/DESeq/FFI_DESeq_res_all",date,".csv"))
#subset to keep only sig. DEGs
CJD_DEGs <- CJD_genestats %>% filter(padj < 0.05)
FFI_DEGs <- FFI_genestats %>% filter(padj < 0.05)
write.csv(CJD_DEGs, file = paste0(dir, "/result_files/DESeq/CJD_DEGs",date,".csv"))
write.csv(FFI_DEGs, file = paste0(dir, "/result_files/DESeq/FFI_DEGs",date,".csv"))
#set Celltypes as factors to determine order on plot
set_celltype_order <- function(data){
data$Celltype <- factor(data$Celltype,
levels = c("GadCer","PV","SST","VglutCer","GadCb", "VglutCb"))
return(data)
}
#count number of DEGs by cell type, set count 0 if no DEGs detected in cell type
count_DEG <- function(data){
data <- data %>% add_count(Celltype)
data$n2 <- ifelse(is.na(data$sLFC), 0, data$n)
return(data)
}
#create input data
FFI <- set_celltype_order(FFI_DEGs)
FFI <- count_DEG(FFI)
CJD <- set_celltype_order(CJD_DEGs)
CJD <- count_DEG(CJD)
#basic plot format
jitter_plot <- function(data){
counts <- data %>%
group_by(Celltype) %>%
summarise(n = n())%>%
filter(n >= 20)
high_deg <- filter(data, Celltype %in% counts$Celltype)
pos <- position_jitter(width = 0.2, height = 0.2)
ggplot(data, mapping = aes(x = Celltype, y = sLFC, fill = padj, label = n2))+
geom_jitter(position = pos, alpha = 0.5, size = 3, shape = 21, show.legend = T)+
geom_text(data, mapping = aes(x = Celltype, y = n2), color = "grey52", y = Inf, vjust = 1, size = 8)+
scale_fill_gradient2(mid = "#542788", high = "#FFC300")+
geom_violin(high_deg, mapping = aes(x = Celltype, y = sLFC), alpha = 0.2, width = 1)+
scale_x_discrete(labels = c(GadCer = "Gad2\nCerebrum", PV = "PV\nCerebrum", SST = "SST\nCerebrum", VglutCer = "vGluT2\nCerebrum", GadCb = "Gad2\nCerebellum", VglutCb = "vGluT2\nCerebellum"))+
labs(fill = "FDR")+
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
panel.grid.major.y = element_line(colour = "grey95"),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
plot.subtitle = element_text(margin = margin(0,0,20,0)),
plot.title.position = "panel",
title = element_text(size = 20))
}
#CJD DEGs
set.seed(123)
CJD_jitter <- jitter_plot(CJD)
p1 <- CJD_jitter +
ylim(-30,30)+
labs(y = "log2 Fold Change",
title = "Creutzfeldt-Jakob Disease (CJD)",
subtitle = "Differentially expressed genes by cell type, FDR ≤ 0.05")
#theme(legend.position = "none")
p1
#FFI DEGs
set.seed(123)
FFI_jitter <- jitter_plot(FFI)
p2 <- FFI_jitter +
ylim(-30,30)+
labs(y = "log2 Fold Change",
title = "Fatal Familial Insomnia (FFI)",
subtitle = "Differentially expressed genes by cell type, FDR ≤ 0.05")
p2
ggsave(plot = p1, file = paste0(dir, "figures/DESeq2/CJD_DEGs_violin",date,".png"), dpi = 300, units = "cm", width = 25, height = 15)
ggsave(plot = p2, file = paste0(dir, "figures/DESeq2/FFI_DEGs_violin",date,".png"), dpi = 300, units = "cm", width = 25, height = 15)
#Jitter plots with zoom_in -> outliers not removed from data
CJD_zoom <- p1
CJD_zoom$layers[[3]] <- NULL #remove violin plots from zoom-in
CJD_zoom <- CJD_zoom + coord_cartesian(ylim = c(-13,10))
CJD_zoom
ggsave(plot = CJD_zoom, file = paste0(dir, "figures/DESeq2/CJD_DEGs_violin_zoom",date,".png"), dpi = 300, units = "cm", width = 25, height = 15)
CJD_zoom
FFI_zoom <- p2
FFI_zoom$layers[[3]] <- NULL
FFI_zoom <- FFI_zoom + coord_cartesian(ylim = c(-13,10))
ggsave(plot = FFI_zoom, file = paste0(dir, "figures/DESeq2/FFI_DEGs_violin_zoom",date,".png"), dpi = 300, units = "cm", width = 25, height = 10)
ggsave(plot = FFI_zoom, file = paste0(dir, "figures/DESeq2/FFI_DEGs_violin_zoom",date,".png"), dpi = 300, units = "cm", width = 25, height = 15)
setwd("~/Documents/DataAnalysis_Ribotag/familial_PrD_github")
knitr::opts_knit$set(root.dir = "")
knitr::opts_chunk$set(echo = TRUE)
setwd(".")
gscKEGG <- loadGSC("../metadata/KEGG_2019_Mouse.gmt", type="gmt")
setwd("~/Documents/DataAnalysis_Ribotag/familial_PrD_github")
gscKEGG <- loadGSC("./metadata/KEGG_2019_Mouse.gmt", type="gmt")
gscKEGG <- loadGSC("./metadata(gmt_files/KEGG_2019_Mouse.gmt", type="gmt")
library(piano)
gscKEGG <- loadGSC("./metadata(gmt_files/KEGG_2019_Mouse.gmt", type="gmt")
gscKEGG <- loadGSC("./metadata(gmt_files/KEGG_2019_Mouse.gmt", type="gmt")
gscKEGG <- loadGSC("./metadata/gmt_files/KEGG_2019_Mouse.gmt", type="gmt")
gscGO <- loadGSC("./metadata/gmt_files/c5.go.bp.v7.4.symbols.gmt", type="gmt", addInfo = )
#read in files
metadata <- read.csv("./metadata/prionsamples_meta.csv", header = T, sep = ",")
tx2gene <- read.table("./metadata/salmon_tx2gene.tsv")
#create new folder for output files
outdir <- file.path(paste0("./result_files/Network/",celltype,"_",date))
#list salmon output files (quant.sf) for selected samples
files <- file.path(paste0("./raw_data/",samples_meta$nfcore_id, "quant.sf"))
load("/Users/susba53/Documents/DataAnalysis_Ribotag/Prion_project_github/R_sessions/GSEA_streptailCJD_SST_2021-10-14 23:48:01.RData")
View(con_go)
load("/Users/susba53/Documents/DataAnalysis_Ribotag/Prion_project_github/R_sessions/Network_analysis_SST_2021-10-25.RData")
View(network_stats)
